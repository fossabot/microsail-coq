(******************************************************************************)
(* Copyright (c) 2019 Steven Keuchel                                          *)
(* All rights reserved.                                                       *)
(*                                                                            *)
(* Redistribution and use in source and binary forms, with or without         *)
(* modification, are permitted provided that the following conditions are     *)
(* met:                                                                       *)
(*                                                                            *)
(* 1. Redistributions of source code must retain the above copyright notice,  *)
(*    this list of conditions and the following disclaimer.                   *)
(*                                                                            *)
(* 2. Redistributions in binary form must reproduce the above copyright       *)
(*    notice, this list of conditions and the following disclaimer in the     *)
(*    documentation and/or other materials provided with the distribution.    *)
(*                                                                            *)
(* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS        *)
(* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  *)
(* TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR *)
(* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR          *)
(* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,      *)
(* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,        *)
(* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR         *)
(* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF     *)
(* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING       *)
(* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS         *)
(* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.               *)
(******************************************************************************)

From Coq Require Import
     Program.Equality
     Program.Tactics.
From MicroSail Require Import
     SmallStep.Step
     Syntax.

Set Implicit Arguments.

Import CtxNotations.
Import EnvNotations.

Module Inversion
       (Import typekit : TypeKit)
       (Import termkit : TermKit typekit)
       (Import progkit : ProgramKit typekit termkit).
  Module SS := SmallStep typekit termkit progkit.
  Import SS.

  Local Ltac steps_inversion_simpl :=
    repeat
      match goal with
      | [ H: exists t, _ |- _ ] => destruct H
      | [ H: _ /\ _ |- _ ] => destruct H
      | [ H: existT _ _ _ = existT _ _ _ |- _ ] => dependent destruction H
      | [ H : False |- _ ] => destruct H
      | _ => progress (cbn in *; subst)
      end.

  Local Ltac steps_inversion_inster :=
    repeat
      match goal with
      | [ H : forall _, _ = _ -> _ |- _ ]
        => specialize (H _ eq_refl)
      | [ H : forall _ _, _ = _ -> _ |- _ ]
        => specialize (H _ _ eq_refl)
      | [ H : forall _ _ _, _ = _ -> _ |- _ ]
        => specialize (H _ _ _ eq_refl)
      | [ H : Final ?s -> _, H' : Final ?s |- _ ]
        => specialize (H H')
      | [ H1 : ‚ü® _, _, _, _ ‚ü© ---> ‚ü® ?Œ≥2, ?Œº2, ?Œ¥2, ?s2 ‚ü©,
          H2 : ‚ü® ?Œ≥2, ?Œº2, ?Œ¥2, ?s2 ‚ü© --->* ‚ü® _, _, _, _ ‚ü© |- _ ]
        => let H:=fresh in add_hypothesis H (step_trans H1 H2)
      | _ => progress steps_inversion_simpl
      end.

  Local Ltac steps_inversion_solve :=
    repeat
      match goal with
      | [ |- exists t, _ ] => eexists
      | [ |- _ /\ _ ] => constructor
      | [ |- True ] => constructor
      | [ |- ‚ü® _, _, _, stm_lit _ _ ‚ü© --->* ‚ü® _, _, _, _ ‚ü© ] => constructor 1
      | [ |- ‚ü® _, _, _, stm_fail _ _ ‚ü© --->* ‚ü® _, _, _, _ ‚ü© ] => constructor 1
      | [ |- ‚ü® _, _, _, stm_let _ _ (stm_lit _ _) _ ‚ü© ---> ‚ü® _, _, _, _ ‚ü© ] => apply step_stm_let_value
      | [ |- ‚ü® _, _, _, stm_let _ _ (stm_fail _ _) _ ‚ü© ---> ‚ü® _, _, _, _ ‚ü© ] => apply step_stm_let_fail
      | [ |- ‚ü® _, _, _, stm_assign _ (stm_lit _ _) _ ‚ü© ---> ‚ü® _, _, _, _ ‚ü© ] => apply step_stm_assign_value
      | [ |- ‚ü® _, _, _, stm_assign _ (stm_fail _ _) _ ‚ü© ---> ‚ü® _, _, _, _ ‚ü© ] => apply step_stm_assign_fail
      | _ => progress cbn
      end; try eassumption.

  Local Ltac steps_inversion_induction :=
    let step := fresh in
    induction 1 as [|? ? ? ? ? ? ? ? ? ? ? ? step]; intros; subst;
      [ cbn in *; contradiction
      | inversion step; steps_inversion_inster; steps_inversion_solve
      ].

  Lemma steps_inversion_let {Œì x œÑ œÉ} {Œ≥1 Œ≥3 : RegStore} {Œº1 Œº3 : Memory}
    {Œ¥1 Œ¥3 : LocalStore Œì}
    {s1 : Stm Œì œÑ} {s2 : Stm (ctx_snoc Œì (x, œÑ)) œÉ} {t : Stm Œì œÉ} (final : Final t)
    (steps : ‚ü® Œ≥1, Œº1, Œ¥1, stm_let x œÑ s1 s2 ‚ü© --->* ‚ü® Œ≥3, Œº3, Œ¥3, t ‚ü©) :
    exists (Œ≥2 : RegStore) (Œº2 : Memory) (Œ¥2 : LocalStore Œì) (s1' : Stm Œì œÑ),
      ‚ü® Œ≥1, Œº1, Œ¥1, s1 ‚ü© --->* ‚ü® Œ≥2, Œº2, Œ¥2, s1' ‚ü© /\ Final s1' /\
      exists (s0 : Stm Œì œÉ),
          ‚ü® Œ≥2, Œº2, Œ¥2, stm_let x œÑ s1' s2 ‚ü© ---> ‚ü® Œ≥2, Œº2, Œ¥2, s0 ‚ü© /\
          ‚ü® Œ≥2, Œº2, Œ¥2, s0 ‚ü© --->* ‚ü® Œ≥3, Œº3, Œ¥3, t ‚ü©.
  Proof using.
    remember (stm_let x œÑ s1 s2) as s. revert steps s1 s2 Heqs.
    steps_inversion_induction.
  Qed.

  Lemma steps_inversion_let' {Œì Œî œÉ} {Œ≥1 Œ≥3 : RegStore} {Œº1 Œº3 : Memory} {Œ¥1 Œ¥3 : LocalStore Œì}
    {Œ¥Œî : LocalStore Œî} {k : Stm (ctx_cat Œì Œî) œÉ} {t : Stm Œì œÉ} (final : Final t)
    (steps : ‚ü® Œ≥1, Œº1, Œ¥1, stm_let' Œ¥Œî k ‚ü© --->* ‚ü® Œ≥3, Œº3, Œ¥3, t ‚ü©) :
    exists Œ≥2 Œº2 Œ¥2 Œ¥Œî' k',
      ‚ü® Œ≥1, Œº1, env_cat Œ¥1 Œ¥Œî , k ‚ü© --->* ‚ü® Œ≥2, Œº2, env_cat Œ¥2 Œ¥Œî' , k' ‚ü© /\ Final k' /\
      exists (s0 : Stm Œì œÉ),
        ‚ü® Œ≥2, Œº2, Œ¥2, stm_let' Œ¥Œî' k' ‚ü© ---> ‚ü® Œ≥2, Œº2, Œ¥2, s0 ‚ü© /\
        ‚ü® Œ≥2, Œº2, Œ¥2, s0 ‚ü© --->* ‚ü® Œ≥3, Œº3, Œ¥3, t ‚ü©.
  Proof using.
    remember (stm_let' Œ¥Œî k) as s. revert steps Œ¥Œî k Heqs.
    steps_inversion_induction.
  Qed.

  Lemma steps_inversion_seq {Œì œÑ œÉ} {Œ≥1 Œ≥3 : RegStore} {Œº1 Œº3 : Memory} {Œ¥1 Œ¥3 : LocalStore Œì}
    (s1 : Stm Œì œÑ) (s2 : Stm Œì œÉ) (t : Stm Œì œÉ) (final : Final t)
    (steps : ‚ü® Œ≥1, Œº1, Œ¥1, stm_seq s1 s2 ‚ü© --->* ‚ü® Œ≥3, Œº3, Œ¥3, t ‚ü©) :
    exists Œ≥2 Œº2 Œ¥2 s1',
      ‚ü® Œ≥1, Œº1, Œ¥1, s1 ‚ü© --->* ‚ü® Œ≥2, Œº2, Œ¥2, s1' ‚ü© /\ Final s1' /\
      exists (s0 : Stm Œì œÉ),
        ‚ü® Œ≥2, Œº2, Œ¥2, stm_seq s1' s2 ‚ü© ---> ‚ü® Œ≥2, Œº2, Œ¥2 , s0 ‚ü© /\
        ‚ü® Œ≥2, Œº2, Œ¥2 , s0 ‚ü© --->* ‚ü® Œ≥3, Œº3, Œ¥3, t ‚ü©.
  Proof using.
    remember (stm_seq s1 s2) as s. revert steps s1 s2 Heqs.
    steps_inversion_induction.
  Qed.

  Lemma steps_inversion_call' {Œì Œî œÉ} {Œ≥1 Œ≥3 : RegStore} {Œº1 Œº3 : Memory} {Œ¥1 Œ¥3 : LocalStore Œì}
    (Œ¥Œî : LocalStore Œî) (k : Stm Œî œÉ) (t : Stm Œì œÉ) (final : Final t)
    (steps : ‚ü® Œ≥1, Œº1, Œ¥1, stm_call' Œî Œ¥Œî œÉ k ‚ü© --->* ‚ü® Œ≥3, Œº3, Œ¥3, t ‚ü©) :
    exists Œº2 Œ≥2 Œ¥Œî' k',
      ‚ü® Œ≥1, Œº1, Œ¥Œî , k ‚ü© --->* ‚ü® Œ≥2, Œº2, Œ¥Œî' , k' ‚ü© /\ Final k' /\
      exists s0,
        ‚ü® Œ≥2, Œº2, Œ¥1, stm_call' Œî Œ¥Œî' œÉ k' ‚ü© ---> ‚ü® Œ≥2, Œº2, Œ¥1, s0 ‚ü© /\
        ‚ü® Œ≥2, Œº2, Œ¥1, s0‚ü© --->* ‚ü® Œ≥3, Œº3, Œ¥3, t ‚ü©.
  Proof using.
    remember (stm_call' Œî Œ¥Œî œÉ k) as s. revert steps Œ¥Œî k Heqs.
    steps_inversion_induction.
  Qed.

  Lemma steps_inversion_assign {Œì œÉ} {Œ≥1 Œ≥3 : RegStore} {Œº1 Œº3 : Memory} {Œ¥1 Œ¥3 : LocalStore Œì}
    (x : ùëø) (xInŒì : InCtx (x,œÉ) Œì) (s1 t : Stm Œì œÉ) (final : Final t)
    (steps : ‚ü® Œ≥1, Œº1, Œ¥1, stm_assign x s1 ‚ü© --->* ‚ü® Œ≥3, Œº3, Œ¥3, t ‚ü©) :
    exists Œ≥2 Œº2 Œ¥2 Œ¥2' s1',
      ‚ü® Œ≥1, Œº1, Œ¥1, s1 ‚ü© --->* ‚ü® Œ≥2, Œº2, Œ¥2, s1' ‚ü© /\ Final s1' /\
      exists (s0 : Stm Œì œÉ),
        ‚ü® Œ≥2, Œº2, Œ¥2, stm_assign x s1' ‚ü© ---> ‚ü® Œ≥2, Œº2, Œ¥2' , s0 ‚ü© /\
        ‚ü® Œ≥2, Œº2, Œ¥2' , s0 ‚ü© --->* ‚ü® Œ≥3, Œº3, Œ¥3, t ‚ü©.
  Proof using.
    remember (stm_assign x s1) as s. revert steps x xInŒì s1 Heqs.
    steps_inversion_induction.
  Qed.

  Lemma steps_inversion_bind {Œì œÑ œÉ} {Œ≥1 Œ≥3 : RegStore} {Œº1 Œº3 : Memory} {Œ¥1 Œ¥3 : LocalStore Œì}
    (s1 : Stm Œì œÑ) (k : Lit œÑ -> Stm Œì œÉ) (t : Stm Œì œÉ) (final : Final t)
    (steps : ‚ü® Œ≥1, Œº1, Œ¥1, stm_bind s1 k ‚ü© --->* ‚ü® Œ≥3, Œº3, Œ¥3, t ‚ü©) :
    exists Œ≥2 Œº2 Œ¥2 s1',
      ‚ü® Œ≥1, Œº1, Œ¥1, s1 ‚ü© --->* ‚ü® Œ≥2, Œº2, Œ¥2, s1' ‚ü© /\ Final s1' /\
      exists (s0 : Stm Œì œÉ),
        ‚ü® Œ≥2, Œº2, Œ¥2, stm_bind s1' k ‚ü© ---> ‚ü® Œ≥2, Œº2, Œ¥2 , s0 ‚ü© /\
        ‚ü® Œ≥2, Œº2, Œ¥2 , s0 ‚ü© --->* ‚ü® Œ≥3, Œº3, Œ¥3, t ‚ü©.
  Proof using.
    remember (stm_bind s1 k) as s. revert steps s1 k Heqs.
    steps_inversion_induction.
  Qed.

End Inversion.
